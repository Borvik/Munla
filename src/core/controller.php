<?php
/**
 * This file is part of the Munla Framework - http://www.treorisoft.com.
 * (c) 2013 Chris Kolkman
 * 
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * controller
 * Provides base functionality for a controller - uses a decorator pattern.
 * 
 * @package    Munla
 * @subpackage core
 * @author     Chris Kolkman
 * @version    1.0
 */
abstract class controller extends secureProvider{
    
    /**
     * If an action is missing, this allows or disallows falling back to the "index" action.
     */
    protected $allowActionFallback = false;
    
    public $view = null; //when specified uses this view.
    public $layout = null; //when specified uses this layout.
    public $error_msg = null; //an error message generated by the controller.
    
    /**
     * Checks if the action exists, falling down to "index" if not found,
     * and NULL if "index" is not found.
     * 
     * @param string|array $action
     *   - string: the action to check for
     *   - array: the action to check for and parameter values for the action
     * 
     * @return array|NULL Array keys are as follows:
     *   - action: string, The name of the action.
     *   - params: array, The parameters for the action.
     */
    final public function getAction($action){
        if( isset($action) ){
            if( is_string($action) ){
                if( method_exists($this, $action) )
                    return array('action' => $action, 'params' => array());
                elseif( $this->allowActionFallback && method_exists($this, 'index') )
                    return array('action' => 'index', 'params' => array($action));
            }elseif( is_array($action) && count($action) > 0 ){
                $a = $action[0];
                $params = (count($action) > 1) ? $action[1] : array();
                
                if( is_string($a) && method_exists($this, $a) )
                    return array('action' => $a, 'params' => $params);
                elseif( $this->allowActionFallback && method_exists($this, 'index') ){
                    array_unshift($params, $a);
                    return array('action' => 'index', 'params' => $params);
                }
            }
        }
        return null;
    }
    
}